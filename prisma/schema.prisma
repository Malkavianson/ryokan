// This is your Prisma schema file,

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Table {
  id        String   @id @default(uuid())
  number    Int      @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  orders    Order[]

  @@map("table")
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  // cpf       String
  // isAdmin   Boolean
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  favorite  Favorite[]
  orders    Order[]

  @@map("user")
}

// N -> N [User <-> Product]
model Favorite {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @map("user_id")
  product     Product  @relation(fields: [productName], references: [name], onDelete: Cascade)
  productName String   @map("product_name")

  @@unique([userId, productName])
  @@map("favorite")
}

// 1 -> N [Category -> Product]
// model Genres {
model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  products  Product[]

  // @@map("genres")
  @@map("category")
}

// model Games {
model Product {
  // title              String
  // description        String
  // coverImageUrl      String
  // year               Int
  // imdbScore          Int
  // trailerYouTubeUrl  String
  // gameplayYouTubeUrl String
  id          String     @id @default(uuid())
  name        String     @unique
  description String
  price       Float
  image       String
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  favorite    Favorite[]
  category    Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId  String?    @map("category_id")
  orders      Order[]
  // @@map("games")

  @@map("product")
}

// model Profiles {
model Order {

  //   title    String @unique
  //   imageURL String
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  table       Table?    @relation(fields: [tableNumber], references: [number], onDelete: SetNull)
  tableNumber Int       @map("table_number")
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String    @map("user_id")
  products    Product[]

  //   @@map("profiles")
  @@map("order")
}
